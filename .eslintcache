[{"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\index.js":"1","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\App.js":"2","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\reportWebVitals.js":"3","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Login.js":"4","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Dashboard.js":"5","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Register.js":"6","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\App.js":"7","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Navbar.js":"8","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\LoadingPage.js":"9","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Profile.js":"10","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\config.js":"11","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\AdminNavbar.js":"12","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\AddUser.js":"13","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\AddExpense.js":"14","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\EditUser.js":"15","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\ManageExpense.js":"16","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\EditExpense.js":"17","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\CompareExpense.js":"18"},{"size":1979,"mtime":1619393033887,"results":"19","hashOfConfig":"20"},{"size":571,"mtime":1614190169325,"results":"21","hashOfConfig":"20"},{"size":375,"mtime":1614189518226,"results":"22","hashOfConfig":"20"},{"size":2911,"mtime":1619727774813,"results":"23","hashOfConfig":"20"},{"size":15559,"mtime":1619735103483,"results":"24","hashOfConfig":"20"},{"size":9104,"mtime":1619728334103,"results":"25","hashOfConfig":"20"},{"size":1689,"mtime":1619665223256,"results":"26","hashOfConfig":"20"},{"size":3737,"mtime":1619728023058,"results":"27","hashOfConfig":"20"},{"size":556,"mtime":1619727680761,"results":"28","hashOfConfig":"20"},{"size":8280,"mtime":1619728205790,"results":"29","hashOfConfig":"20"},{"size":540,"mtime":1619131996311,"results":"30","hashOfConfig":"20"},{"size":2863,"mtime":1619665018516,"results":"31","hashOfConfig":"20"},{"size":12359,"mtime":1619673117998,"results":"32","hashOfConfig":"20"},{"size":6875,"mtime":1619728043544,"results":"33","hashOfConfig":"20"},{"size":7836,"mtime":1619727631599,"results":"34","hashOfConfig":"20"},{"size":4540,"mtime":1619727976090,"results":"35","hashOfConfig":"20"},{"size":7788,"mtime":1619727455263,"results":"36","hashOfConfig":"20"},{"size":8846,"mtime":1619666511520,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"wjvfq2",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"41"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"41"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"41"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"41"},"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\index.js",["86"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, BrowserRouter } from 'react-router-dom'\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport Login from './Components/Login'\r\nimport AddUser from './Components/AddUser'\r\nimport Register from './Components/Register'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Dashboard from './Components/Dashboard';\r\nimport LoadingPage from './Components/LoadingPage';\r\nimport Profile from './Components/Profile'\r\nimport AddExpense from './Components/AddExpense'\r\nimport ManageExpense from './Components/ManageExpense'\r\nimport EditUser from './Components/EditUser'\r\nimport EditExpense from './Components/EditExpense'\r\nimport CompareExpense from './Components/CompareExpense'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Route path = \"/\" exact component = {App}/>\r\n    <Route path = \"/CompareExpense\" exact component = {CompareExpense}/>\r\n    <Route path = \"/AddExpense\" exact component = {AddExpense}/>\r\n    <Route path = \"/ManageExpense\" exact component = {ManageExpense}/>\r\n    <Route path = \"/EditExpense\" exact component = {EditExpense}/>\r\n    <Route path = \"/AddUser\" exact component = {AddUser}/>\r\n    <Route path = \"/Login\" exact component = {App}/>\r\n    <Route path = \"/Register\" exact component = {Register}/>\r\n    <Route path = \"/Dashboard\" exact component = {Dashboard}/>\r\n    <Route path = \"/Profile/:username\" exact component = {Profile}/>\r\n    <Route path = \"/EditUser\" exact component = {EditUser}/>\r\n    <Route path = \"/Register/Success\" exact render = {(props) => <LoadingPage {...props} status = \"Successfully Registered\" button = \"/\" buttonText = \"Return to login\"/>}/>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["87","88"],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\App.js",[],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\reportWebVitals.js",[],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Login.js",[],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Dashboard.js",["89","90","91","92","93"],"import React from 'react'\r\nimport Navbar from './Navbar'\r\nimport AdminNavbar from './AdminNavbar'\r\nimport axios from 'axios'\r\nimport {API_URL_USERS, API_URL_USER_DELETE, API_URL } from '../config'\r\nimport {Table} from 'react-bootstrap'\r\nimport { Chart } from \"react-google-charts\";\r\n\r\n\r\n/*\r\n    Dashboard Component.\r\n    Contains the functions and JSX for the dashboard page.\r\n    Displays the correct output depending on the user that is logged in,\r\n    admin or customer.\r\n*/\r\nclass Dashboard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userID: this.props.location.state[\"user\"],\r\n            userType: this.props.location.state[\"userType\"],\r\n            user: {},\r\n            customers: [{}],\r\n            expenses: [{}],\r\n            monthlyReport: [{}]\r\n        }\r\n        this.getCustomersTable = this.getCustomersTable.bind(this)\r\n        this.handleDelete = this.handleDelete.bind(this)\r\n    }\r\n\r\n    // Function to take action once component loads. Fetches user data and expense\r\n    // data for the user from the API.\r\n    componentDidMount() {\r\n        let date = new Date()\r\n        // Fetch data from api\r\n        if (this.state.userType === \"admin\") {\r\n            axios.get(API_URL_USERS)\r\n            .then((response) => {\r\n                this.setState({customers: response.data})\r\n            })\r\n        }\r\n        else if (this.state.userType === \"customer\") {\r\n            // API call to fetch the user data\r\n            axios.get(API_URL_USERS + '/' + this.state.userID)\r\n            .then((response) => {\r\n                this.setState({user: response.data})\r\n            })\r\n            // API call to fetch the user expenses for the current year\r\n            axios.get(API_URL + \"/expenses/\" + this.state.userID + \"/year/\" + date.getFullYear())\r\n            .then((response) => {\r\n                this.setState({expenses: response.data})\r\n            })\r\n            // API call to fetch expenses for the current month\r\n            axios.get(API_URL + \"/expenses/\" + this.state.userID + \"/monthly/\" + date.getFullYear())\r\n            .then((response) => {\r\n                this.setState({monthlyReport: response.data})\r\n            })\r\n        }\r\n    }\r\n\r\n    // Function to delete the user from the row selected by an admin\r\n    handleDelete(index) {\r\n        let userID = document.getElementById(\"userID\" + index).innerHTML\r\n        // API call to delete the user\r\n        axios.delete(API_URL_USER_DELETE + '/' + userID)\r\n        .then((response) => {\r\n            //update customers table\r\n            axios.get(API_URL_USERS)\r\n                .then((response) => {\r\n                    this.setState({customers: response.data})\r\n                })\r\n        })\r\n    }\r\n\r\n    // Function to redirect the user to the Edit User component that will allow the\r\n    // admin to edit the user they selected.\r\n    handleEdit(index) {\r\n        let userID = document.getElementById(\"userID\" + index).innerHTML\r\n        this.props.history.push({pathname: '/EditUser', state: {admin: this.state.userID, user: userID}})\r\n    }\r\n\r\n    // Function to display a table of all the users in the database\r\n    getCustomersTable() {\r\n        return (\r\n            <div>\r\n                <Table striped bordered hover size=\"sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>UserID</th>\r\n                            <th>Email</th>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>Edit Customer</th>\r\n                            <th>DeleteCustomer</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {(this.state.customers).map((element, index) => {\r\n                            return(\r\n                            <tr id = {\"row\" + index}>\r\n                                <td id = {\"userID\" + index}>{element.userID}</td>\r\n                                <td>{element.email}</td>\r\n                                <td>{element.fname}</td>\r\n                                <td>{element.lname}</td>\r\n                                <td><button type=\"button\" name=\"\" id=\"\" class=\"btn btn-primary\" btn-lg btn-block onClick = {() => this.handleEdit(index)}>Edit</button></td>\r\n                                <td><button type=\"button\" name=\"\" id=\"\" class=\"btn btn-primary\" btn-lg btn-block onClick = {() => this.handleDelete(index)}>Delete</button></td>\r\n                            </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Function to parse the expenses in the state and return a 2D array containing\r\n    // the month and the total expense amount for that month. \r\n    // Ex: [[\"January\", 1000], [\"February\", 2000],...]\r\n    updateMonthlyData() {\r\n        let array = [['Month', 'Amount']];\r\n        this.state.monthlyReport.forEach(element => {\r\n            array.push([element.month, element.amount])\r\n        });\r\n        return array\r\n    }\r\n    \r\n    // Function to parse the expenses in the state and return a 2D array containing\r\n    // the expense category sum \r\n    // Ex: [[\"January\", 1000], [\"February\", 2000],...]\r\n    updateCategoricalPieData() {\r\n        let rentTotal = 0;\r\n        let entertainmentTotal = 0;\r\n        let utilityTotal = 0;\r\n        let foodTotal = 0;\r\n        let businessTotal = 0;\r\n        let groceriesTotal = 0;\r\n        let otherTotal = 0;\r\n        // Loop through the expenses array\r\n        this.state.expenses.forEach(element => {\r\n            // Check expense category\r\n            switch(element.category) {\r\n                case \"Food\":\r\n                    foodTotal += element.amount\r\n                    break;\r\n                case \"Rent/Mortgage\":\r\n                    rentTotal += element.amount\r\n                    break;\r\n                case \"Entertainment\":\r\n                    entertainmentTotal += element.amount\r\n                    break;\r\n                case \"Utility\":\r\n                    utilityTotal += element.amount\r\n                    break;\r\n                case \"Business\":\r\n                    businessTotal += element.amount;\r\n                    break;\r\n                case \"Groceries\":\r\n                    groceriesTotal += element.amount\r\n                    break;\r\n                default:\r\n                    otherTotal += element.amount\r\n            }\r\n        });\r\n        let arr = [['Category', 'Amount'], \r\n            foodTotal === 0 ? ['', ''] : ['Food', foodTotal],\r\n            rentTotal === 0 ? ['', ''] : ['Rent/Mortgage', rentTotal],\r\n            entertainmentTotal === 0 ? ['', ''] : ['Entertainment', entertainmentTotal],\r\n            utilityTotal === 0 ? ['', ''] : ['Utility', utilityTotal],\r\n            groceriesTotal === 0 ? ['', ''] : ['Groceries', groceriesTotal],\r\n            businessTotal === 0 ? ['', ''] : ['Business', businessTotal],\r\n            otherTotal === 0 ? ['', ''] : ['Other', otherTotal] ];\r\n        return arr;\r\n    }\r\n\r\n    // Function to return a pie chart containing expenses by the month of the current year\r\n    getExpensesByMonth() {\r\n        if(this.state.expenses.length != 0) {\r\n            return (\r\n                <Chart\r\n                    width={'1000px'}\r\n                    height={'700px'}\r\n                    chartType=\"PieChart\"\r\n                    loader={<div>Loading Expense Chart</div>}\r\n                    data={this.updateMonthlyData()}\r\n                    options={{\r\n                        title: 'Expenses By Month',\r\n                        'backgroundColor': 'transparent',\r\n                        pieHole: 0.4,\r\n                        legend: {\r\n                            position: \"bottom\",\r\n                            textStyle: {\r\n                              color: \"233238\",\r\n                              fontSize: 14\r\n                            }\r\n                          },\r\n                          chartArea: {\r\n                            left: 100,\r\n                            top: 100,\r\n                            width: \"90%\",\r\n                            height: \"80%\"\r\n                          },\r\n                    }}\r\n                    rootProps={{ 'data-testid': '3' }}\r\n                />\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <h1>No Expenses</h1>\r\n            )\r\n        }\r\n    }\r\n\r\n    // Function to return a pie chart containing expenses by category\r\n    getCategoricalPieGraph() {\r\n\r\n        if(this.state.expenses.length !== 0) {\r\n            return (\r\n                <Chart\r\n                    width={'1000px'}\r\n                    height={'700px'}\r\n                    chartType=\"PieChart\"\r\n                    loader={<div>Loading Expense Chart</div>}\r\n                    data={this.updateCategoricalPieData()}\r\n                    options={{\r\n                        title: 'Expenses By Category',\r\n                        'backgroundColor': 'transparent',\r\n                        pieHole: 0.4,\r\n                        legend: {\r\n                            position: \"bottom\",\r\n                            textStyle: {\r\n                                color: \"233238\",\r\n                                fontSize: 14\r\n                            }\r\n                            },\r\n                        chartArea: {\r\n                            left: 100,\r\n                            top: 100,\r\n                            width: \"90%\",\r\n                            height: \"80%\"\r\n                        },\r\n                    }}\r\n                    rootProps={{ 'data-testid': '3' }}\r\n                />\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <h1>No Expenses</h1>\r\n            )\r\n        }    \r\n    }\r\n    \r\n    // Function to get the year budget spending for the customer\r\n    getMonthlyReport() {\r\n        let total = 0;\r\n        this.state.expenses.forEach(element => {\r\n            total += element.amount\r\n        });\r\n        \r\n        return (\r\n            <div>\r\n                <h2>Yearly Spendings</h2>\r\n                <h2>Expenses: ${total}</h2><br/>\r\n                <h2>Income: ${(this.state.user.annIncome - 0.0).toFixed(2)}</h2><br/>\r\n                <h2>Savings: $ {((this.state.user.annIncome - 0.0) - total).toFixed(2)} </h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Function to get the tax bracket for a customer depending on their filing status and\r\n    // annual income\r\n    printTaxBracket(){\r\n        //Based on 2019 tax data\r\n        let tax_bracket;\r\n        let user = this.state.user\r\n        if(user[\"filingStatus\"] = \"Single\") {\r\n            if(user[\"annIncome\"] <= 9700) {\r\n                tax_bracket = 0.10;\r\n            }\r\n            else if(user[\"annIncome\"] <= 39475) {\r\n                tax_bracket = 0.12;\r\n            }\r\n            else if(user[\"annIncome\"] <= 84200) {\r\n                tax_bracket = 0.22;\r\n            }\r\n            else if(user[\"annIncome\"] <= 160725) {\r\n                tax_bracket = 0.24;\r\n            }\r\n            else if(user[\"annIncome\"] <= 204100) {\r\n                tax_bracket = 0.32;\r\n            }\r\n            else if(user[\"annIncome\"] <= 520300) {\r\n                tax_bracket = 0.35;\r\n            }\r\n            else {\r\n                tax_bracket = 0.37;\r\n            }\r\n        }\r\n        else if(user[\"filingStatus\"] = \"Married filing jointly\") {\r\n            if(user[\"annIncome\"] <= 19400) {\r\n                tax_bracket = 0.10;\r\n            }\r\n            else if(user[\"annIncome\"] <= 78950) {\r\n                tax_bracket = 0.12;\r\n            }\r\n            else if(user[\"annIncome\"] <= 168400) {\r\n                tax_bracket = 0.22;\r\n            }\r\n            else if(user[\"annIncome\"] <= 321450) {\r\n                tax_bracket = 0.24;\r\n            }\r\n            else if(user[\"annIncome\"] <= 408200) {\r\n                tax_bracket = 0.32;\r\n            }\r\n            else if(user[\"annIncome\"] <= 612350) {\r\n                tax_bracket = 0.35;\r\n            }\r\n            else {\r\n                tax_bracket = 0.37;\r\n            }\r\n        }\r\n        else if(user[\"filingStatus\"] = \"Married filing separately\") {\r\n            if(user[\"annIncome\"] <= 9700) {\r\n                tax_bracket = 0.10;\r\n            }\r\n            else if(user[\"annIncome\"] <= 39475) {\r\n                tax_bracket = 0.12;\r\n            }\r\n            else if(user[\"annIncome\"] <= 84200) {\r\n                tax_bracket = 0.22;\r\n            }\r\n            else if(user[\"annIncome\"] <= 160725) {\r\n                tax_bracket = 0.24;\r\n            }\r\n            else if(user[\"annIncome\"] <= 204100) {\r\n                tax_bracket = 0.32;\r\n            }\r\n            else if(user[\"annIncome\"] <= 306175) {\r\n                tax_bracket = 0.35;\r\n            }\r\n            else {\r\n                tax_bracket = 0.37;\r\n            }\r\n        }else{\r\n            if(user[\"annIncome\"] <= 13850){\r\n                tax_bracket = 0.10;\r\n            }else if(user[\"annIncome\"] <= 52850){\r\n                tax_bracket = 0.12;\r\n            }else if(user[\"annIncome\"] <= 84200){\r\n                tax_bracket = 0.22;\r\n            }else if(user[\"annIncome\"] <= 160700){\r\n                tax_bracket = 0.24;\r\n            }else if(user[\"annIncome\"] <= 204100){\r\n                tax_bracket = 0.32;\r\n            }else if(user[\"annIncome\"] <= 510300){\r\n                tax_bracket = 0.35;\r\n            }else{\r\n                tax_bracket = 0.37;\r\n            }\r\n        }\r\n        //let tax_brack_statement=\"Your tax bracket is \" + tax_bracket;\r\n        return(\r\n            <div>\r\n                <hr/>\r\n                <h1>\r\n                    Tax Bracket: {tax_bracket}\r\n                </h1>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n            \r\n\r\n    // Function to render the dashbaord\r\n    render() {\r\n        const table = this.getCustomersTable()\r\n        const monthlyPieChart = this.getExpensesByMonth()\r\n        const monthlyReport = this.getMonthlyReport()\r\n        const categoricalPieGraph = this.getCategoricalPieGraph()\r\n        \r\n        return (\r\n            <div>\r\n                {/* IF USER IS A CUSTOMER, RENDER THIS */}\r\n                {this.state.userType === \"customer\" ?\r\n                    <div>\r\n                        <Navbar user = {this.state.userID} userType = {this.state.userType}/>\r\n                        <h2>Welcome, {this.state.userID}</h2>\r\n                        <br></br>\r\n                        <h1>Annual Budget Spread</h1><hr/>\r\n                        <table>\r\n                            <tr>\r\n                                <td>{monthlyPieChart}</td>\r\n                                <td>{categoricalPieGraph}</td>\r\n                            </tr>\r\n                        </table>\r\n                        \r\n                        <h2></h2>\r\n                        {monthlyReport}\r\n                        {this.printTaxBracket()}\r\n                    </div>\r\n                :\r\n                // IF USER IS AN ADMIN, RENDER THIS \r\n                <div>\r\n                    <AdminNavbar user = {this.state.userID} userType = {this.state.userType}/>\r\n                    Welcome, {this.state.userID}<br></br>\r\n                    CUSTOMERS:<br></br>\r\n                    {table}\r\n                    \r\n                    </div>\r\n                }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Dashboard","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Register.js",["94"],"import React from 'react'\r\nimport '../Styles/Custom.scss'\r\nimport {Form, Button, Col, InputGroup} from 'react-bootstrap'\r\nimport { Redirect } from 'react-router'\r\nimport axios from 'axios'\r\nimport {API_URL} from '../config'\r\n\r\n/*\r\n    Register Component.\r\n    Contains the functions and JSX for the user registration webpage\r\n*/\r\nclass Register extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        // Default state\r\n        this.state = {\r\n            registered: false,\r\n            input: {},\r\n            errors: {}\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // Actions to take once component loads. Stores filing status into the state\r\n    componentDidMount () {\r\n        let input = this.state.input\r\n        input[\"filingStatus\"] = document.getElementById(\"filingStatus\").value\r\n        this.setState({\r\n            registered: false, input:input, errors:this.state.errors\r\n        })\r\n    }\r\n\r\n    // Function to read user input and update state\r\n    handleChange(event) {\r\n        let input = this.state.input;\r\n        input[event.target.name] = event.target.value;\r\n      \r\n        this.setState({\r\n            registered: false,\r\n            input:input,\r\n            errors: this.state.errors\r\n        });\r\n    }\r\n\r\n    // Function to handle user form submission\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        // Make sure form is valid\r\n        if (this.validate()) {\r\n            // Call the API to register the user\r\n            axios.post(API_URL + '/users/register', {\r\n                userID: this.state.input.username,\r\n                email: this.state.input[\"email\"],\r\n                password: this.state.input[\"password\"],\r\n                fname: this.state.input[\"fname\"],\r\n                lname: this.state.input[\"lname\"],\r\n                userType: \"customer\",\r\n                dob: this.state.input[\"dob\"],\r\n                annIncome: this.state.input[\"annualIncome\"],\r\n                filingStatus: this.state.input[\"filingStatus\"]\r\n            }).then((response) => {\r\n                if (response.data === 'User exists') { \r\n                    this.state.errors.usernameExists = \"Username exists, try a different one.\"\r\n                \r\n                    this.setState( {\r\n                        registered: false,\r\n                        input: this.state.input,\r\n                        errors: this.state.errors\r\n                    } ) \r\n                }\r\n                else {\r\n                    this.setState ({registered: true, input : {}, errors : {}})\r\n                }\r\n            \r\n            })     \r\n        }\r\n    }      \r\n    \r\n    // Function to validate user input before submitting form\r\n    // Checks that user confirmed password, confirmed email, and dob is \r\n    // not a future date\r\n    validate() {\r\n        \r\n        let valid = true;\r\n        let input = this.state.input;\r\n        let errors = this.state.errors;\r\n        let dob = new Date(input[\"dob\"])\r\n        let today = new Date()\r\n        \r\n        if(input[\"password\"] !== input[\"confirmPassword\"]){\r\n                errors[\"confirmPassword\"] = \"Passwords don't match.\";\r\n                valid = false;\r\n        }\r\n        else {\r\n            errors[\"confirmPassword\"] = \"\";\r\n        }\r\n        if(input[\"email\"] !== input[\"confirmEmail\"]){\r\n                errors[\"confirmEmail\"] = \"Emails don't match.\";\r\n                valid = false;\r\n        }\r\n        else {\r\n            errors[\"confirmEmail\"] = \"\";\r\n        }\r\n        if(input[\"filingStatus\"] === \"\" || input[\"filingStatus\"] === null){\r\n            errors[\"filingStatus\"] = \"Please select a filing status.\"\r\n            valid = false;\r\n        }\r\n        if (dob > today){\r\n            errors[\"birthdayError\"] = \"Birthday cannot be a future date.\"\r\n            valid = false;\r\n        }\r\n        else {\r\n            errors[\"birthdayError\"] = \"\"\r\n        }\r\n    \r\n        this.setState({errors:errors});\r\n        return valid;\r\n    }\r\n\r\n\r\n    // Render function containing JSX and HTML\r\n    render() {\r\n        return(\r\n        <div id=\"registerContainer\">\r\n            {this.state.registered && (<Redirect to=\"/Register/Success\"/>)}\r\n            <h1>Create an Account</h1>\r\n            <Form onSubmit = {this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formGridFName\">\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <Form.Control type=\"text\"  name = \"fname\" onChange = {this.handleChange} required/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formGridLName\">\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control type=\"text\"  name = \"lname\" onChange = {this.handleChange} required/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formEmail\">\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control type = \"email\" name = \"email\" onChange = {this.handleChange} required/>\r\n                        <Form.Text className = \"confirmPass\">{this.state.errors.confirmEmail}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formConfirmEmail\">\r\n                        <Form.Label>Confirm Email Address</Form.Label>\r\n                        <Form.Control type = \"email\"  name = \"confirmEmail\" onChange = {this.handleChange} required/>\r\n                    </Form.Group>\r\n                    \r\n                </Form.Row>\r\n\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formUsername\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type = \"text\" name = \"username\" onChange = {this.handleChange} required/>\r\n                        <Form.Text className = \"usernameExists\">{this.state.errors.usernameExists}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                    \r\n                </Form.Row>\r\n\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formPassword\">\r\n                        <Form.Label>Create a Password</Form.Label>\r\n                        <Form.Control type = \"password\" name = \"password\" onChange = {this.handleChange} required/>\r\n                        <Form.Text className = \"confirmPass\">{this.state.errors.confirmPassword}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formConfirmEmail\">\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control type = \"password\" name = \"confirmPassword\" onChange = {this.handleChange} required/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formBirthday\">\r\n                        <Form.Label>Birthday</Form.Label>\r\n                        \r\n                        <Form.Control type = \"date\" name = \"dob\"  onChange = {this.handleChange} required />\r\n                        <Form.Text className = \"birthdayValidate\">{this.state.errors.birthdayError}</Form.Text>     \r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formFilingStatus\">\r\n                    <Form.Label>Filing Status</Form.Label>\r\n                    <Form.Control as=\"select\"  name = \"filingStatus\" id = \"filingStatus\" onChange = {this.handleChange} required>\r\n                        <option>Single</option>\r\n                        <option>Married filing jointly</option>\r\n                        <option>Married filing seperately</option>\r\n                        <option>Head of household</option>\r\n                    </Form.Control>\r\n                    <Form.Text className = \"confirmPass\">{this.state.errors.filingStatus}</Form.Text>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formAnnualIncome\"  required>\r\n                    <Form.Label>Annual Income</Form.Label>\r\n                    <InputGroup>\r\n                        <InputGroup.Prepend>\r\n                        <InputGroup.Text>$</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <Form.Control type = \"number\" min={0} name = \"annualIncome\" onChange = {this.handleChange} />\r\n                    </InputGroup>\r\n                    \r\n                    </Form.Group>               \r\n                </Form.Row>\r\n                <Form.Group className = \"btn1\">\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                    <Button href='/' variant = \"primary\" className = \"link1\">Return to Login</Button>\r\n                </Form.Group>\r\n            </Form>\r\n\r\n\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Register;","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\App.js",[],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Navbar.js",["95","96","97","98","99","100","101","102","103","104","105","106","107"],"import React from 'react'\r\nimport logoutIcon from './Images/logout-icon.svg'\r\nimport moneyIcon from './Images/money.svg'\r\nimport plusIcon from './Images/plus-icon.svg'\r\nimport profileIcon from './Images/profile-icon.svg'\r\nimport editIcon from './Images/editIcon.svg'\r\nimport compareIcon from './Images/compare.svg'\r\nimport { Link } from 'react-router-dom'\r\n\r\n/*\r\n    Navbar Component meant for the customer.\r\n    Contains the menu for the customer navbar and appropriate links\r\n*/\r\nclass Navbar extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    \r\n    // Render function containging JSX and HTML\r\n    render(){\r\n        return (\r\n            \r\n            <div>\r\n                <nav class=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n                    <Link to = {{pathname: '/Dashboard', state: {user: this.props.user, userType: this.props.userType}}}>\r\n                        <a class=\"navbar-brand\" style = {{color: \"white\"}}>Where's My Money?\r\n                    <img src={moneyIcon} style = {{height: 30, width: 40}}></img>\r\n                    </a>\r\n                    </Link>\r\n                    \r\n                \r\n                    <div class=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                        <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                        <Link to = {{pathname: '/AddExpense', state: {user: this.props.user, userType: this.props.userType}}}>\r\n                            <a class=\"nav-link\" style = {{color: \"white\"}}>Add Expense\r\n                            <img src={plusIcon} style = {{height: 30, width: 40}}></img>\r\n                            </a>\r\n                        </Link>\r\n                        <li class=\"nav-item active\">\r\n                        <Link to = {{pathname: '/ManageExpense', state: {user: this.props.user, userType: this.props.userType}}}>\r\n                            <a class=\"nav-link\" style = {{color: \"white\"}}> Manage Expenses\r\n                            <img src={editIcon} style = {{height: 30, width: 40}}></img>\r\n                            </a>\r\n                        </Link>\r\n                        </li>\r\n                        <li class=\"nav-item active\">\r\n                        <Link to = {{pathname: '/CompareExpense', state: {user: this.props.user, userType: this.props.userType}}}>\r\n                            <a class=\"nav-link\" style = {{color: \"white\"}}> Compare Expense\r\n                            <img src={compareIcon} style = {{height: 30, width: 40}}></img>\r\n                            </a>\r\n                        </Link>\r\n                        </li>\r\n                        <li class=\"nav-item active\">\r\n                            <Link to = {{pathname: '/Profile/' + this.props.user, state: {userType: this.props.userType}}}>\r\n                                <a class = 'nav-link' style = {{color: \"white\"}}>\r\n                                Profile <span ><img src={profileIcon} style = {{height: 30, width: 30}}></img></span>\r\n                                </a>\r\n                            </Link>\r\n                        </li>           \r\n                        </ul>\r\n                        <form class=\"form-inline my-2 my-lg-0\">\r\n                            <Link to = ''>\r\n                                <a class = 'nav-item active' style = {{color: \"white\"}}>\r\n                                Logout <span ><img src={logoutIcon} style = {{height: 30, width: 30}}></img></span>\r\n                                </a>\r\n                            </Link>\r\n                        \r\n                        </form>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n}\r\nexport default Navbar\r\n\r\n\r\n","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\LoadingPage.js",[],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\Profile.js",["108"],"import React, { Component } from 'react'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nimport { API_URL_UPDATE_USER, API_URL_USERS } from '../config'\r\nimport Navbar from './Navbar'\r\nimport {Form, Button, Col, InputGroup} from 'react-bootstrap'\r\nimport AdminNavbar from './AdminNavbar'\r\nimport { Redirect } from 'react-router'\r\n\r\n\r\n/*\r\n    Profile Component.\r\n    Contains the functions and JSX for the user profile webpage\r\n*/\r\nexport default class Profile extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        // Default state\r\n        this.state = {\r\n            user : {},\r\n            userType: this.props.location.state[\"userType\"],\r\n            editted : false,\r\n            errors: {}\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // Actions to take once component loads in. Call the API to get the \r\n    // user information\r\n    componentDidMount() {\r\n        let {username} = this.props.match.params\r\n        // API call to get the users information\r\n        axios.get(API_URL_USERS + '/' + username)\r\n        .then((response) => {\r\n            this.setState({editted : false, user: response.data})\r\n        })\r\n    }\r\n\r\n    // Function to read user input and update state\r\n    handleChange(event) {\r\n        let user = this.state.user;\r\n        user[event.target.name] = event.target.value;\r\n        this.setState({\r\n            editted : false, user : user\r\n        });\r\n    }\r\n\r\n    // Function to handle user form submission\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        // Make sure form is valid\r\n        if (this.validate()) {\r\n            event.preventDefault()\r\n            // Call the API to update user information\r\n            axios.post(API_URL_UPDATE_USER, {\r\n                userID: this.state.user[\"userID\"],\r\n                email: this.state.user[\"email\"],\r\n                password: this.state.user[\"password\"],\r\n                fname: this.state.user[\"fname\"],\r\n                lname: this.state.user[\"lname\"],\r\n                userType: this.state.user[\"userType\"],\r\n                dob: this.state.user[\"dob\"],\r\n                annIncome: this.state.user[\"annIncome\"],\r\n                filingStatus: this.state.user[\"filingStatus\"]\r\n            }).then((response) => {\r\n                let errors = this.state.errors\r\n                if (response.data === \"User updated\"){ \r\n                    errors[\"update\"] = \"Profile successfully updated!\"\r\n                    this.setState({editted : true, errors: errors})\r\n                }})\r\n    \r\n        }\r\n    }\r\n    \r\n    // Function to make sure form is valid. Makes sure that the user confirmed\r\n    // password, confirmed email, and selected a filing status\r\n    validate() {\r\n        let user = this.state.user;\r\n        let valid = true\r\n        let errors = this.state.errors\r\n\r\n        if(user[\"password\"] !== user[\"confirmPassword\"]){\r\n                errors[\"confirmPassword\"] = \"Passwords don't match.\";\r\n                valid = false;\r\n        }\r\n        else {\r\n            errors[\"confirmPassword\"] = \"\";\r\n        }\r\n        if(user[\"email\"] !== user[\"confirmEmail\"]){\r\n                errors[\"confirmEmail\"] = \"Emails don't match.\";\r\n                valid = false;\r\n        }\r\n        else {\r\n            errors[\"confirmEmail\"] = \"\";\r\n        }\r\n        if(user[\"filingStatus\"] === \"\" || user[\"filingStatus\"] === null){\r\n            errors[\"filingStatus\"] = \"Please select a filing status.\"\r\n        }\r\n    \r\n        this.setState({user: user, errors:errors});\r\n        return valid;\r\n    }\r\n\r\n    // Render function containing JSX and HTML\r\n    render() {\r\n        return (\r\n            <div>\r\n                {(this.state.userType === \"customer\") ? <Navbar user = {this.state.user[\"userID\"]} userType = {this.state.userType}/> : <AdminNavbar user = {this.state.user[\"userID\"]} userType = {this.state.userType}></AdminNavbar> }\r\n                {this.state.editted && (<Redirect to= {{ pathname: '/Dashboard', state: {user: this.state.user[\"userID\"], userType: this.state.userType} }} />) }\r\n\r\n                <h1>Edit Profile</h1>\r\n                <Form onSubmit = {this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formGridFName\">\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <Form.Control type=\"text\"  name = \"fname\" onChange = {this.handleChange} value = {this.state.user[\"fname\"]} required/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formGridLName\">\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control type=\"text\"  name = \"lname\" onChange = {this.handleChange} value = {this.state.user[\"lname\"]} required/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formEmail\">\r\n                        <Form.Label>New Email Address</Form.Label>\r\n                        <Form.Control type = \"email\" name = \"email\" onChange = {this.handleChange} value = {this.state.user[\"email\"]} required/>\r\n                        <Form.Text className = \"confirmPass\">{this.state.errors[\"confirmEmail\"]}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formConfirmEmail\">\r\n                        <Form.Label>Confirm New Email Address</Form.Label>\r\n                        <Form.Control type = \"email\"  name = \"confirmEmail\" onChange = {this.handleChange}  required/>\r\n                    </Form.Group>\r\n                    \r\n                </Form.Row>\r\n\r\n\r\n                \r\n\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formPassword\">\r\n                        <Form.Label>Change Password</Form.Label>\r\n                        <Form.Control type = \"password\" name = \"password\" onChange = {this.handleChange} value = {this.state.user[\"password\"]} required/>\r\n                        <Form.Text className = \"confirmPass\">{this.state.errors[\"confirmPassword\"]}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formConfirmEmail\">\r\n                        <Form.Label>Confirm New Password</Form.Label>\r\n                        <Form.Control type = \"password\" name = \"confirmPassword\" onChange = {this.handleChange}   required/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                   \r\n                    <Form.Group as={Col} controlId=\"formFilingStatus\">\r\n                    <Form.Label>Filing Status</Form.Label>\r\n                    <Form.Control as=\"select\"  name = \"filingStatus\" id = \"filingStatus\" onChange = {this.handleChange} value = {this.state.user[\"filingStatus\"]} required>\r\n                        <option>Single</option>\r\n                        <option>Married filing jointly</option>\r\n                        <option>Married filing seperately</option>\r\n                        <option>Head of household</option>\r\n                    </Form.Control>\r\n                    \r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group as={Col} controlId=\"formAnnualIncome\"  required>\r\n                    <Form.Label>Annual Income</Form.Label>\r\n                    <InputGroup>\r\n                        <InputGroup.Prepend>\r\n                        <InputGroup.Text>$</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <Form.Control type = \"number\" min={0} name = \"annIncome\" onChange = {this.handleChange} value = {this.state.user[\"annIncome\"]}  />\r\n                    </InputGroup>\r\n                    \r\n                    </Form.Group> \r\n                </Form.Row>\r\n\r\n                <Form.Group className = \"btn1\">\r\n                    <Button variant=\"primary\" type=\"submit\" onclick={this.printTaxBracket}>\r\n                        Save Changes\r\n                    </Button>\r\n                    <Form.Text className = \"updateStatus\">{this.state.errors[\"update\"]}</Form.Text>\r\n                </Form.Group>\r\n            </Form>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\config.js",[],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\AdminNavbar.js",["109","110","111","112","113","114","115","116","117"],"import React from 'react'\r\nimport logoutIcon from './Images/logout-icon.svg'\r\nimport moneyIcon from './Images/money.svg'\r\nimport plusIcon from './Images/plus-icon.svg'\r\nimport profileIcon from './Images/profile-icon.svg'\r\nimport { Link } from 'react-router-dom'\r\n\r\n/*\r\n    Admin Navbar Component.\r\n    Contains the menu for the admin navbar and appropriate links\r\n*/\r\nclass AdminNavbar extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    \r\n    // Render function containging JSX and HTML\r\n    render(){\r\n       \r\n        return (\r\n            \r\n            <div>\r\n                <nav class=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n                    <Link to = {{pathname: '/Dashboard', state: {user: this.props.user, userType: this.props.userType}}}>\r\n                        <a class=\"navbar-brand\" style = {{color: \"white\"}}>Where's My Money?\r\n                        <img src={moneyIcon} style = {{height: 30, width: 40}}></img>\r\n                        </a>\r\n                    </Link>\r\n                \r\n                    <div class=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                        <ul class=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                            <li class=\"nav-item active\">\r\n                                <Link to = {{pathname: '/AddUser/', state: {user: this.props.user, userType: this.props.userType}}}>\r\n                                    <a class = 'nav-link' style = {{color: \"white\"}}>\r\n                                    Add User <span ><img src={plusIcon} style = {{height: 30, width: 30}}></img></span>\r\n                                    </a>\r\n                                </Link>\r\n                            </li>\r\n                            <li class=\"nav-item active\">\r\n                                <Link to = {{pathname: '/Profile/' + this.props.user, state: {userType: this.props.userType}}}>\r\n                                    <a class = 'nav-link' style = {{color: \"white\"}}>\r\n                                    Profile <span ><img src={profileIcon} style = {{height: 30, width: 30}}></img></span>\r\n                                    </a>\r\n                                </Link>\r\n                            </li>           \r\n                        </ul>\r\n                        <form class=\"form-inline my-2 my-lg-0\">\r\n                            <Link to = ''>\r\n                                <a class = 'nav-item active' style = {{color: \"white\"}}>\r\n                                Logout <span ><img src={logoutIcon} style = {{height: 30, width: 30}}></img></span>\r\n                                </a>\r\n                            </Link>\r\n                        \r\n                        </form>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n        \r\n}\r\n}\r\nexport default AdminNavbar\r\n\r\n\r\n",["118","119"],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\AddUser.js",["120","121","122","123"],"import React from 'react'\r\nimport '../Styles/Custom.scss'\r\nimport {Form, Button, Col, InputGroup, ToggleButtonGroup, ToggleButton} from 'react-bootstrap'\r\nimport axios from 'axios'\r\nimport {API_URL} from '../config'\r\nimport AdminNavbar from './AdminNavbar'\r\n\r\n\r\n/*\r\n    Add User Component. Only used by admin account\r\n    Contains the functions and JSX for the add user webpage\r\n*/\r\nclass AddUser extends React.Component {\r\n\r\n    constructor(){\r\n        super();\r\n        // Default state\r\n        this.state = {\r\n            registered: false,\r\n            input: {filingStatus: \"Single\"},\r\n            errors: {}\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // Function to take action once component loads. Stores user type as customer by default\r\n    componentDidMount () {\r\n        let input = this.state.input\r\n        input[\"userType\"] = \"customer\"\r\n        this.setState({\r\n            registered: false, input:input, errors:this.state.errors\r\n        })\r\n    }\r\n\r\n    // Function to read user input and update state\r\n    handleChange(event) {\r\n        let input = this.state.input;\r\n        input[event.target.name] = event.target.value;\r\n\r\n        this.setState({\r\n            registered: false,\r\n            input:input,\r\n            errors: this.state.errors\r\n        });\r\n    }\r\n\r\n    // Function to handle user form submission. Calls the API to add a customer account\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (this.validate()) {\r\n            if (this.state.input[\"userType\"] === 'customer') {\r\n                // Call API\r\n                axios.post(API_URL + '/users/register', {\r\n                    userID: this.state.input.username,\r\n                    email: this.state.input[\"email\"],\r\n                    password: this.state.input[\"password\"],\r\n                    fname: this.state.input[\"fname\"],\r\n                    lname: this.state.input[\"lname\"],\r\n                    userType: this.state.input[\"userType\"],\r\n                    dob: this.state.input[\"dob\"],\r\n                    annIncome: this.state.input[\"annualIncome\"],\r\n                    filingStatus: this.state.input[\"filingStatus\"]\r\n                }).then((response) => {\r\n                    // Customer already exists\r\n                    if (response.data === 'User exists') { \r\n                        this.state.errors.usernameExists = \"Username exists, try a different one.\"\r\n                        this.state.errors[\"output\"] = response.data\r\n                        this.setState( {\r\n                            registered: false,\r\n                            input: this.state.input,\r\n                            errors: this.state.errors\r\n                        } ) \r\n                    }\r\n                    else {\r\n                        this.setState ({registered: true, input : {filingStatus: \"Single\"}, errors : {output: response.data}})\r\n                    }\r\n                \r\n                })\r\n            }\r\n            else {\r\n                //Adding an admin account\r\n                axios.post(API_URL + '/users/register', {\r\n                    userID: this.state.input.username,\r\n                    email: this.state.input[\"email\"],\r\n                    password: this.state.input[\"password\"],\r\n                    fname: this.state.input[\"fname\"],\r\n                    lname: this.state.input[\"lname\"],\r\n                    userType: this.state.input[\"userType\"],\r\n                    dob: new Date(),\r\n                    annIncome: 0,\r\n                    filingStatus: \"Single\"\r\n                }).then((response) => {\r\n                    // Admin exists\r\n                    if (response.data === 'User exists') { \r\n                        this.state.errors.usernameExists = \"Username exists, try a different one.\"\r\n                        this.state.errors[\"output\"] = response.data\r\n                        this.setState( {\r\n                            registered: false,\r\n                            input: this.state.input,\r\n                            errors: this.state.errors\r\n                        } ) \r\n                    }\r\n                    else {\r\n                        this.setState ({registered: true, input : {filingStatus: \"Single\"}, errors : {output: response.data}})\r\n                    }\r\n                \r\n                })\r\n            }\r\n        }\r\n    }      \r\n    \r\n    // Function to validate user inpur before submitting form\r\n    // Checks if password and email are confirmed, dob is not a future date, and filing status is selected\r\n    validate() {\r\n        \r\n        let valid = true;\r\n        let input = this.state.input;\r\n        let errors = this.state.errors;\r\n        let dob = new Date(input[\"dob\"])\r\n        let today = new Date()\r\n        if (input[\"userType\"] === 'customer') {\r\n\r\n        \r\n            if(input[\"password\"] !== input[\"confirmPassword\"]){\r\n                    errors[\"confirmPassword\"] = \"Passwords don't match.\";\r\n                    valid = false;\r\n            }\r\n            else {\r\n                errors[\"confirmPassword\"] = \"\";\r\n            }\r\n            if(input[\"email\"] !== input[\"confirmEmail\"]){\r\n                    errors[\"confirmEmail\"] = \"Emails don't match.\";\r\n                    valid = false;\r\n            }\r\n            else {\r\n                errors[\"confirmEmail\"] = \"\";\r\n            }\r\n            if(input[\"filingStatus\"] === \"\" || input[\"filingStatus\"] === null){\r\n                errors[\"filingStatus\"] = \"Please select a filing status.\"\r\n                valid = false;\r\n            }\r\n            if (dob > today){\r\n                errors[\"birthdayError\"] = \"Birthday cannot be a future date.\"\r\n                valid = false;\r\n            }\r\n            else {\r\n                errors[\"birthdayError\"] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            if(input[\"password\"] !== input[\"confirmPassword\"]){\r\n                errors[\"confirmPassword\"] = \"Passwords don't match.\";\r\n                valid = false;\r\n            }\r\n            else {\r\n                errors[\"confirmPassword\"] = \"\";\r\n            }\r\n            if(input[\"email\"] !== input[\"confirmEmail\"]){\r\n                    errors[\"confirmEmail\"] = \"Emails don't match.\";\r\n                    valid = false;\r\n            }\r\n            else {\r\n                errors[\"confirmEmail\"] = \"\";\r\n            }\r\n        }\r\n        // Update errors state\r\n        this.setState({errors:errors});\r\n        return valid;\r\n    }\r\n\r\n    // Render function containing JSX and HTML\r\n    render() {\r\n        return(\r\n        <div >\r\n            <AdminNavbar user = {this.props.location.state[\"user\"]} userType = {this.props.location.state[\"userType\"]}></AdminNavbar>\r\n            <h1>Add User</h1>\r\n            <Form onSubmit = {this.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formGridFName\">\r\n                    <Form.Label>First Name</Form.Label>\r\n                    <Form.Control type=\"text\"  name = \"fname\" onChange = {this.handleChange} required/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formGridLName\">\r\n                    <Form.Label>Last Name</Form.Label>\r\n                    <Form.Control type=\"text\"  name = \"lname\" onChange = {this.handleChange} required/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formEmail\">\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control type = \"email\" name = \"email\" onChange = {this.handleChange} required/>\r\n                        <Form.Text className = \"confirmPass\">{this.state.errors.confirmEmail}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formConfirmEmail\">\r\n                        <Form.Label>Confirm Email Address</Form.Label>\r\n                        <Form.Control type = \"email\"  name = \"confirmEmail\" onChange = {this.handleChange} required/>\r\n                    </Form.Group>\r\n                    \r\n                </Form.Row>\r\n\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formUsername\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type = \"text\" name = \"username\" onChange = {this.handleChange} required/>\r\n                        <Form.Text className = \"usernameExists\">{this.state.errors.usernameExists}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                    \r\n                </Form.Row>\r\n\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formPassword\">\r\n                        <Form.Label>Create a Password</Form.Label>\r\n                        <Form.Control type = \"password\" name = \"password\" onChange = {this.handleChange} required/>\r\n                        <Form.Text className = \"confirmPass\">{this.state.errors.confirmPassword}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formConfirmEmail\">\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control type = \"password\" name = \"confirmPassword\" onChange = {this.handleChange} required/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formUserType\" required>\r\n                        <Form.Label>User Type</Form.Label><br></br>\r\n                        <ToggleButtonGroup name=\"userType\" type=\"radio\" className=\"mb-2\" defaultValue={'customer'}>\r\n                            <ToggleButton value={'customer'} onChange = {this.handleChange} >Customer</ToggleButton>\r\n                            <ToggleButton value={'admin'} onChange = {this.handleChange} >Admin</ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                {this.state.input[\"userType\"] === 'customer' ? <div>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formBirthday\">\r\n                        <Form.Label>Birthday</Form.Label>\r\n                        \r\n                        <Form.Control type = \"date\" name = \"dob\"  onChange = {this.handleChange} required />\r\n                        <Form.Text className = \"birthdayValidate\">{this.state.errors.birthdayError}</Form.Text>     \r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"formFilingStatus\">\r\n                    <Form.Label>Filing Status</Form.Label>\r\n                    <Form.Control as=\"select\"  name = \"filingStatus\" id = \"filingStatus\" onChange = {this.handleChange} required>\r\n                        <option>Single</option>\r\n                        <option>Married filing jointly</option>\r\n                        <option>Married filing seperately</option>\r\n                        <option>Head of household</option>\r\n                    </Form.Control>\r\n                    <Form.Text className = \"confirmPass\">{this.state.errors.filingStatus}</Form.Text>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"formAnnualIncome\"  required>\r\n                    <Form.Label>Annual Income</Form.Label>\r\n                    <InputGroup>\r\n                        <InputGroup.Prepend>\r\n                        <InputGroup.Text>$</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <Form.Control type = \"number\" min={0} name = \"annualIncome\" onChange = {this.handleChange} />\r\n                    </InputGroup>\r\n                    \r\n                    </Form.Group>               \r\n                </Form.Row></div>\r\n                : <div></div> }\r\n                \r\n                <Form.Group className = \"btn1\">\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Add User\r\n                    </Button>\r\n                    <Form.Text className = \"output\">{this.state.errors[\"output\"]}</Form.Text>\r\n                </Form.Group>\r\n            </Form>\r\n\r\n\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default AddUser;","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\AddExpense.js",[],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\EditUser.js",[],"C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\ManageExpense.js",["124"],"import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { API_URL_EXPENSE, API_URL_EXPENSE_DELETE } from '../config'\r\nimport {Table} from 'react-bootstrap'\r\nimport Navbar from './Navbar'\r\n\r\n\r\n/*\r\n    Manage Component.\r\n    Contains the functions and JSX for the Manage Expense webpage\r\n*/\r\nclass ManageExpense extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // Default state\r\n        this.state = {\r\n            userID: this.props.location.state[\"user\"],\r\n            userType: this.props.location.state[\"userType\"],\r\n            expenses: [{}]\r\n        }\r\n        this.getExpensesTable = this.getExpensesTable.bind(this)\r\n    }\r\n\r\n    // Actions to take once component loads in. Retrieves all expense for the  user\r\n    // from the API\r\n    componentDidMount() {\r\n        // API call to get all the expenses for the user\r\n        axios.get(API_URL_EXPENSE + \"/\" + this.state.userID)\r\n        .then((response) => {\r\n            this.setState({\r\n                expenses: response.data})\r\n            })\r\n    }\r\n\r\n    // Function to allow the customer to delete an expense from the expenses table\r\n    handleDelete(index) {\r\n        // Get the expenseID from the row selected\r\n        let expenseID = document.getElementById(\"expenseID\" + index).innerHTML\r\n        // API call to delete the expense\r\n        axios.delete(API_URL_EXPENSE_DELETE + '/' + expenseID)\r\n        .then((response) => {\r\n            // API call to update the expenses table\r\n            axios.get(API_URL_EXPENSE + \"/\" + this.state.userID)\r\n                .then((response) => {   \r\n                    this.setState({\r\n                        expenses: response.data\r\n                    })       \r\n                })\r\n        })\r\n    }\r\n\r\n    // Function to allow the customer to edit an expense from the expenses table\r\n    handleEdit(index) {\r\n        // Get the expenseID from the row selected\r\n        let expenseID = document.getElementById(\"expenseID\" + index).innerHTML\r\n        // Redirect customer to the webpage that allows them to edit an expense\r\n        this.props.history.push({pathname: '/EditExpense', state: {expenseID: expenseID, userID: this.state.userID, userType: this.state.userType}})\r\n    }\r\n\r\n    // Function to render in the table containing all the user expenses\r\n    getExpensesTable() {\r\n            return (\r\n                <div>\r\n                    <Table striped bordered hover size=\"sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ExpenseID</th>\r\n                                <th>Expense Title</th>\r\n                                <th>Date added</th>\r\n                                <th>Amount</th>\r\n                                <th>Category</th>\r\n                                <th>Recurring</th>\r\n                                <th></th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {(this.state.expenses).map((element, index) => {\r\n                            return(\r\n                            <tr id = {\"row\" + index}>\r\n                                <td id = {\"expenseID\" + index}>{element.expenseID}</td>\r\n                                <td>{element.expenseTitle}</td>                                        <td>{element.dateAdded}</td>\r\n                                <td>{element.amount}</td>\r\n                                <td>{element.category}</td>\r\n                                <td>{element.recurring == 1 ? \"Yes\" : \"No\" }</td>\r\n                                <td><button type=\"button\" name=\"\" id=\"\" class=\"btn btn-primary\" btn-lg btn-block onClick = {() => this.handleEdit(index)}>Edit</button></td>\r\n                                <td><button type=\"button\" name=\"\" id=\"\" class=\"btn btn-primary\" btn-lg btn-block onClick = {() => this.handleDelete(index)}>Delete</button></td>\r\n                            </tr>\r\n                            )})}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            )\r\n    }\r\n    \r\n\r\n\r\n    // Render function containing the JSX and HTML\r\n    render() {\r\n        const table =  this.getExpensesTable()\r\n        return (\r\n            <div>\r\n                <Navbar user = {this.state.userID} userType = {\"customer\"}/>\r\n                <h2>Expenses List</h2>\r\n                {table}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ManageExpense","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\EditExpense.js",["125","126","127"],"import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { API_URL_UPDATE_EXPENSE, API_URL_EXPENSES } from '../config'\r\nimport Navbar from './Navbar'\r\nimport {Form, Button, Col, InputGroup} from 'react-bootstrap'\r\nimport { Redirect } from 'react-router'\r\n\r\n\r\n/*\r\n    Edit Expense Component.\r\n    Contains the functions and JSX for the webpage that allows a customer to edit expenses\r\n*/\r\nexport default class EditExpense extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        // Default state\r\n        this.state = {\r\n            userID: this.props.location.state[\"userID\"],\r\n            userType: this.props.location.state[\"userType\"],\r\n            editted: false,\r\n            input: {},\r\n            errors: {}\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    // Actions to take once component loads. Set eddited as false and set \r\n    // recurring checkbox to appropriate value depending on state\r\n    componentDidMount() {\r\n        // API call to get expense information\r\n        axios.get(API_URL_EXPENSES + '/' + this.props.location.state[\"expenseID\"])\r\n        .then((response) => {\r\n            this.setState({\r\n                editted:false, \r\n                input: response.data\r\n            })\r\n            this.state.input[\"recurring\"] == 1 ? (document.getElementById(\"recurring\").checked = true) : (document.getElementById(\"recurring\").checked = false)\r\n        })\r\n    }\r\n    // Function to read user input and update state\r\n    handleChange(event) {\r\n        let input = this.state.input;\r\n    \r\n        input[event.target.name] = event.target.value;\r\n        \r\n        // Check recurring checkbox\r\n        if (event.target.name == \"recurring\") {\r\n            input[\"recurring\"] = document.getElementById(\"recurring\").checked ? 1 : 0\r\n        }\r\n        \r\n        this.setState({\r\n            editted: false,\r\n            input: input\r\n        });\r\n    }\r\n\r\n    // Function to hanlde user form submission\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        let recurring = 0;\r\n        // Make sure user input is valid\r\n        if (this.validate()) {\r\n            event.preventDefault()\r\n            if(document.getElementById(\"recurring\").checked)\r\n                recurring = 1;\r\n            // API call to update expense information\r\n            axios.post(API_URL_UPDATE_EXPENSE, {\r\n                expenseID: this.state.input[\"expenseID\"],\r\n                userID: this.state.input[\"userID\"],\r\n                amount: this.state.input[\"amount\"],\r\n                category: this.state.input[\"category\"],\r\n                dateAdded: this.state.input[\"dateAdded\"],\r\n                expenseTitle: this.state.input[\"expenseTitle\"],\r\n                recurring: this.state.input[\"recurring\"]\r\n            }).then((response) => {\r\n                let errors = this.state.errors\r\n                if (response.data === \"Expense updated\"){ \r\n                    errors[\"output\"] = \"Expense successfully updated!\"\r\n                    this.setState({ editted: true, errors: errors})\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // Function to validate user input before submitting form\r\n    // Checks if category is selected and dateAdded is not a future date\r\n    validate() {\r\n        let valid = true;\r\n        let errors = {};\r\n        let input = this.state.input;\r\n        let dateAdded = new Date(input[\"dateAdded\"])\r\n        let today = new Date()\r\n        \r\n        // handling category \r\n        if(input[\"category\"] === \"\" || input[\"category\"] === null){\r\n            errors[\"category\"] = \"Please select a category.\"\r\n            valid = false;\r\n        }\r\n\r\n        //handling date error\r\n        if (dateAdded >= today){\r\n            errors[\"dateError\"] = \"Date cannot be a future date.\"\r\n            valid = false;\r\n        }\r\n        else {\r\n            errors[\"dateError\"] = \"\"\r\n        }\r\n    \r\n        this.setState({ errors:errors});\r\n        return valid;\r\n    }\r\n\r\n    \r\n    // Render function containing JSX and HTML\r\n    render() {\r\n        return (\r\n            <div>\r\n            {this.state.editted && (<Redirect to= {{pathname: '/ManageExpense', state: {user: this.state.userID, userType: this.state.userType}}}/>) }\r\n            <Navbar user = {this.state.userID} userType = {this.state.userType}/>\r\n            <div id=\"registerContainer\">\r\n                <h1>Edit Expense {this.state.input.expenseID}</h1>\r\n                <Form onSubmit = {this.handleSubmit}>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formExpenseTitle\">\r\n                            <Form.Label>Expense Title</Form.Label>\r\n                            <Form.Control type = \"text\" name = \"expenseTitle\" value = {this.state.input[\"expenseTitle\"]} onChange = {this.handleChange} required/>\r\n                        </Form.Group>                    \r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formDate\">\r\n                            <Form.Label>Date</Form.Label>\r\n                            \r\n                            <Form.Control type = \"date\" name = \"dateAdded\" value = {this.state.input[\"dateAdded\"]} onChange = {this.handleChange} required />\r\n                            <Form.Text>{this.state.errors.dateError}</Form.Text>     \r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} controlId=\"formAmount\"  required>\r\n                        <Form.Label>Amount</Form.Label>\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                            <InputGroup.Text>$</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <Form.Control type = \"number\" min={0} name = \"amount\" value = {this.state.input[\"amount\"]} onChange = {this.handleChange} />\r\n                        </InputGroup>\r\n                        </Form.Group>    \r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formCategory\">\r\n                        <Form.Label>Category</Form.Label>\r\n                        <Form.Control as=\"select\"  name = \"category\" id = \"category\" value = {this.state.input[\"category\"]} onChange = {this.handleChange} required>\r\n                            <option>Food</option>\r\n                            <option>Groceries</option>\r\n                            <option>Rent/Mortgage</option>\r\n                            <option>Gas</option>\r\n                            <option>Entertainment</option>\r\n                            <option>Utility</option>\r\n                            <option>Business</option>\r\n                            <option>Other</option>\r\n                        </Form.Control>\r\n                        <Form.Text>{this.state.errors.category}</Form.Text>\r\n                        </Form.Group>          \r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formRecurring\">\r\n                            <Form.Check inline label=\"Recurring\" id=\"recurring\" name = \"recurring\" onChange = {this.handleChange} />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Group className = \"btn1\">\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                        <Form.Text className = \"output\">{this.state.errors[\"output\"]}</Form.Text>\r\n                    </Form.Group>\r\n\r\n                </Form>\r\n\r\n            </div>\r\n        </div>    \r\n        )\r\n    }\r\n}\r\n","C:\\Users\\black\\Documents\\SoftwareEngineering\\master\\src\\Components\\CompareExpense.js",["128","129","130","131","132","133","134","135","136","137","138"],"import React, { Component } from 'react'\r\nimport Navbar from './Navbar'\r\nimport { Chart } from \"react-google-charts\";\r\nimport { API_URL_EXPENSES } from '../config';\r\nimport axios from 'axios';\r\n\r\n/*\r\n    Compare Expense Component.\r\n    Contains the functions and JSX for the webpage that compares two expenses\r\n    side-by-side.\r\n*/\r\nexport default class CompareExpense extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        // Default state\r\n        this.state = {\r\n            userID: this.props.location.state[\"user\"],\r\n            userType: this.props.location.state[\"userType\"],\r\n            month1: \"\",\r\n            month2: \"\",\r\n            expense1: [{}],\r\n            expense2: [{}]\r\n        }\r\n    }\r\n\r\n    // Function to parse expenses into a 2D array containing all the expense\r\n    // title with the expense amount. Ex: [[\"Groceries\", 100], [\"Gas\", 20],...]\r\n    updatePieData(expenses) {\r\n        // First element is the header of each column\r\n        let array = [['Expense', 'Amount']];\r\n        expenses.forEach(element => {\r\n            array.push([element.expenseTitle, element.amount])\r\n        });\r\n        return array\r\n    }\r\n\r\n    // Function to parse expenses and sum up the expenses by categories and store\r\n    // the data into a 2D array containing the category with the sum. \r\n    // Ex: [[\"Food\", 100], [\"Entertainment\", 20],...]\r\n    updateCategoricalPieData(expenses) {\r\n        let rentTotal = 0;\r\n        let entertainmentTotal = 0;\r\n        let utilityTotal = 0;\r\n        let foodTotal = 0;\r\n        let businessTotal = 0;\r\n        let groceriesTotal = 0;\r\n        let otherTotal = 0;\r\n        // Loop through array\r\n        expenses.forEach(element => {\r\n            // Check category\r\n            switch(element.category) {\r\n                case \"Food\":\r\n                    foodTotal += element.amount\r\n                    break;\r\n                case \"Rent/Mortgage\":\r\n                    rentTotal += element.amount\r\n                    break;\r\n                case \"Entertainment\":\r\n                    entertainmentTotal += element.amount\r\n                    break;\r\n                case \"Utility\":\r\n                    utilityTotal += element.amount\r\n                    break;\r\n                case \"Business\":\r\n                    businessTotal += element.amount;\r\n                    break;\r\n                case \"Groceries\":\r\n                    groceriesTotal += element.amount\r\n                    break;\r\n                default:\r\n                    otherTotal += element.amount\r\n            }\r\n        });\r\n        let arr = [['Category', 'Amount'], \r\n            foodTotal == 0 ? ['', ''] : ['Food', foodTotal],\r\n            rentTotal == 0 ? ['', ''] : ['Rent/Mortgage', rentTotal],\r\n            entertainmentTotal == 0 ? ['', ''] : ['Entertainment', entertainmentTotal],\r\n            utilityTotal == 0 ? ['', ''] : ['Utility', utilityTotal],\r\n            groceriesTotal == 0 ? ['', ''] : ['Groceries', groceriesTotal],\r\n            businessTotal == 0 ? ['', ''] : ['Business', businessTotal],\r\n            otherTotal == 0 ? ['', ''] : ['Other', otherTotal]];\r\n        return arr;\r\n    }\r\n\r\n    // Function to return a pie chart containing expenses\r\n    getExpenseGraph(expenses) {\r\n        // Check if expenses array is empty\r\n        if(expenses.length != 0) {\r\n            return (\r\n                <Chart\r\n                    width={'1000px'}\r\n                    height={'700px'}\r\n                    chartType=\"PieChart\"\r\n                    loader={<div>Loading Expense Chart</div>}\r\n                    data={this.updatePieData(expenses)}\r\n                    options={{\r\n                        title: 'Expenses',\r\n                        'backgroundColor': 'transparent',\r\n                        pieHole: 0.4,\r\n                        legend: {\r\n                            position: \"bottom\",\r\n                            textStyle: {\r\n                              color: \"233238\",\r\n                              fontSize: 14\r\n                            }\r\n                          },\r\n                          chartArea: {\r\n                            left: 100,\r\n                            top: 100,\r\n                            width: \"90%\",\r\n                            height: \"80%\"\r\n                          },\r\n                    }}\r\n                    rootProps={{ 'data-testid': '3' }}\r\n                />\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <h1>No Expenses</h1>\r\n            )\r\n        }\r\n    }\r\n    // Function to return a pie chart containing expenses by category\r\n    getExpenseGraphCategory(expenses) {\r\n        if(expenses.length != 0) {\r\n            return (\r\n                <Chart\r\n                    width={'1000px'}\r\n                    height={'700px'}\r\n                    chartType=\"PieChart\"\r\n                    loader={<div>Loading Expense Chart</div>}\r\n                    data={this.updateCategoricalPieData(expenses)}\r\n                    options={{\r\n                        title: 'Expenses By Category',\r\n                        'backgroundColor': 'transparent',\r\n                        pieHole: 0.4,\r\n                        legend: {\r\n                            position: \"bottom\",\r\n                            textStyle: {\r\n                                color: \"233238\",\r\n                                fontSize: 14\r\n                            }\r\n                            },\r\n                        chartArea: {\r\n                            left: 100,\r\n                            top: 100,\r\n                            width: \"90%\",\r\n                            height: \"80%\"\r\n                        },\r\n                    }}\r\n                    rootProps={{ 'data-testid': '3' }}\r\n                />\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <h1>No Expenses</h1>\r\n            )\r\n        }    \r\n    }\r\n\r\n    // Update the state of expense1 depending on the month selected by the user\r\n    updateExpense1() {\r\n        if (this.state.month1 != \"\") {\r\n            // Parse month and year from string\r\n            let year = this.state.month1.substring(0,4)\r\n            let month = parseInt(this.state.month1.substring(5,7)) - 1\r\n            // Call the API to get the list of expenses for the selected month\r\n            axios.get(API_URL_EXPENSES + \"/\" + this.state.userID + \"/month/\" + month + \"/year/\" + year)\r\n            .then((response) => {\r\n                this.setState({expense1: response.data})\r\n            })\r\n        }\r\n    }\r\n\r\n    // Update the state of expense2 depending on the month selected by the user\r\n    updateExpense2() {\r\n        if (this.state.month2 != \"\") {\r\n            // Parse month and year from string\r\n            let year = this.state.month2.substring(0,4)\r\n            let month = parseInt(this.state.month2.substring(5,7)) - 1\r\n            // Call the API to get the list of expenses for the selected month\r\n            axios.get(API_URL_EXPENSES + \"/\" + this.state.userID + \"/month/\" + month + \"/year/\" + year)\r\n            .then((response) => {\r\n                this.setState({expense2: response.data})\r\n            })\r\n        }\r\n    }\r\n\r\n    // Function to when user clicks the 'Compare' button\r\n    compare() {\r\n        this.updateExpense1();\r\n        this.updateExpense2();\r\n    }\r\n\r\n    // Function to render the two pie graphs for each month\r\n    render() {\r\n        let graph1 = this.getExpenseGraph(this.state.expense1)\r\n        let graph2 = this.getExpenseGraph(this.state.expense2)\r\n        let graph1Category = this.getExpenseGraphCategory(this.state.expense1)\r\n        let graph2Category = this.getExpenseGraphCategory(this.state.expense2)\r\n\r\n        return (\r\n            <div>\r\n                <Navbar user = {this.props.location.state[\"user\"]} userType = {this.props.location.state[\"userType\"]}/>\r\n       \r\n                <table> \r\n                    <tr>\r\n                        <th>Month 1<input type=\"month\" id=\"month1\" name=\"month1\" onChange={(event) => this.setState({month1: event.target.value})} required></input></th>\r\n                        <th>Month 2<input type=\"month\" id=\"month1\" name=\"month1\" onChange={(event) => this.setState({month2: event.target.value})} required></input></th>\r\n                    </tr> \r\n                    <tr>\r\n                        <td><input type=\"button\" value=\"Compare\" onClick={this.compare.bind(this)}/></td>\r\n                    </tr>\r\n                    <tr> \r\n                        <td>{graph1}</td> \r\n                        <td>{graph2}</td> \r\n                    </tr> \r\n\r\n                    <tr> \r\n                        <td>{graph1Category}</td> \r\n                        <td>{graph2Category}</td> \r\n                    </tr>\r\n                </table>  \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n",{"ruleId":"139","severity":1,"message":"140","line":6,"column":8,"nodeType":"141","messageId":"142","endLine":6,"endColumn":13},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":178,"column":39,"nodeType":"149","messageId":"150","endLine":178,"endColumn":41},{"ruleId":"151","severity":1,"message":"152","line":278,"column":12,"nodeType":"153","messageId":"154","endLine":278,"endColumn":43},{"ruleId":"151","severity":1,"message":"152","line":301,"column":17,"nodeType":"153","messageId":"154","endLine":301,"endColumn":64},{"ruleId":"151","severity":1,"message":"152","line":324,"column":17,"nodeType":"153","messageId":"154","endLine":324,"endColumn":67},{"ruleId":"155","severity":1,"message":"156","line":399,"column":25,"nodeType":"157","endLine":399,"endColumn":29},{"ruleId":"158","severity":1,"message":"159","line":65,"column":21,"nodeType":"160","endLine":65,"endColumn":38},{"ruleId":"161","severity":1,"message":"162","line":16,"column":5,"nodeType":"163","messageId":"164","endLine":18,"endColumn":6},{"ruleId":"165","severity":1,"message":"166","line":28,"column":25,"nodeType":"157","endLine":28,"endColumn":76},{"ruleId":"167","severity":1,"message":"168","line":29,"column":21,"nodeType":"157","endLine":29,"endColumn":76},{"ruleId":"165","severity":1,"message":"166","line":37,"column":29,"nodeType":"157","endLine":37,"endColumn":76},{"ruleId":"167","severity":1,"message":"168","line":38,"column":29,"nodeType":"157","endLine":38,"endColumn":83},{"ruleId":"165","severity":1,"message":"166","line":43,"column":29,"nodeType":"157","endLine":43,"endColumn":76},{"ruleId":"167","severity":1,"message":"168","line":44,"column":29,"nodeType":"157","endLine":44,"endColumn":83},{"ruleId":"165","severity":1,"message":"166","line":50,"column":29,"nodeType":"157","endLine":50,"endColumn":76},{"ruleId":"167","severity":1,"message":"168","line":51,"column":29,"nodeType":"157","endLine":51,"endColumn":86},{"ruleId":"165","severity":1,"message":"166","line":57,"column":33,"nodeType":"157","endLine":57,"endColumn":82},{"ruleId":"167","severity":1,"message":"168","line":58,"column":48,"nodeType":"157","endLine":58,"endColumn":105},{"ruleId":"165","severity":1,"message":"166","line":65,"column":33,"nodeType":"157","endLine":65,"endColumn":89},{"ruleId":"167","severity":1,"message":"168","line":66,"column":47,"nodeType":"157","endLine":66,"endColumn":103},{"ruleId":"139","severity":1,"message":"169","line":2,"column":10,"nodeType":"141","messageId":"142","endLine":2,"endColumn":18},{"ruleId":"161","severity":1,"message":"162","line":14,"column":5,"nodeType":"163","messageId":"164","endLine":16,"endColumn":6},{"ruleId":"165","severity":1,"message":"166","line":26,"column":25,"nodeType":"157","endLine":26,"endColumn":76},{"ruleId":"167","severity":1,"message":"168","line":27,"column":25,"nodeType":"157","endLine":27,"endColumn":80},{"ruleId":"165","severity":1,"message":"166","line":35,"column":37,"nodeType":"157","endLine":35,"endColumn":86},{"ruleId":"167","severity":1,"message":"168","line":36,"column":53,"nodeType":"157","endLine":36,"endColumn":107},{"ruleId":"165","severity":1,"message":"166","line":42,"column":37,"nodeType":"157","endLine":42,"endColumn":86},{"ruleId":"167","severity":1,"message":"168","line":43,"column":52,"nodeType":"157","endLine":43,"endColumn":109},{"ruleId":"165","severity":1,"message":"166","line":50,"column":33,"nodeType":"157","endLine":50,"endColumn":89},{"ruleId":"167","severity":1,"message":"168","line":51,"column":47,"nodeType":"157","endLine":51,"endColumn":103},{"ruleId":"143","replacedBy":"170"},{"ruleId":"145","replacedBy":"171"},{"ruleId":"158","severity":1,"message":"159","line":67,"column":25,"nodeType":"160","endLine":67,"endColumn":42},{"ruleId":"158","severity":1,"message":"159","line":68,"column":25,"nodeType":"160","endLine":68,"endColumn":42},{"ruleId":"158","severity":1,"message":"159","line":96,"column":25,"nodeType":"160","endLine":96,"endColumn":42},{"ruleId":"158","severity":1,"message":"159","line":97,"column":25,"nodeType":"160","endLine":97,"endColumn":42},{"ruleId":"147","severity":1,"message":"172","line":86,"column":56,"nodeType":"149","messageId":"150","endLine":86,"endColumn":58},{"ruleId":"147","severity":1,"message":"172","line":39,"column":43,"nodeType":"149","messageId":"150","endLine":39,"endColumn":45},{"ruleId":"147","severity":1,"message":"172","line":49,"column":31,"nodeType":"149","messageId":"150","endLine":49,"endColumn":33},{"ruleId":"139","severity":1,"message":"173","line":67,"column":17,"nodeType":"141","messageId":"142","endLine":67,"endColumn":26},{"ruleId":"147","severity":1,"message":"172","line":76,"column":23,"nodeType":"149","messageId":"150","endLine":76,"endColumn":25},{"ruleId":"147","severity":1,"message":"172","line":77,"column":23,"nodeType":"149","messageId":"150","endLine":77,"endColumn":25},{"ruleId":"147","severity":1,"message":"172","line":78,"column":32,"nodeType":"149","messageId":"150","endLine":78,"endColumn":34},{"ruleId":"147","severity":1,"message":"172","line":79,"column":26,"nodeType":"149","messageId":"150","endLine":79,"endColumn":28},{"ruleId":"147","severity":1,"message":"172","line":80,"column":28,"nodeType":"149","messageId":"150","endLine":80,"endColumn":30},{"ruleId":"147","severity":1,"message":"172","line":81,"column":27,"nodeType":"149","messageId":"150","endLine":81,"endColumn":29},{"ruleId":"147","severity":1,"message":"172","line":82,"column":24,"nodeType":"149","messageId":"150","endLine":82,"endColumn":26},{"ruleId":"147","severity":1,"message":"148","line":89,"column":28,"nodeType":"149","messageId":"150","endLine":89,"endColumn":30},{"ruleId":"147","severity":1,"message":"148","line":127,"column":28,"nodeType":"149","messageId":"150","endLine":127,"endColumn":30},{"ruleId":"147","severity":1,"message":"148","line":166,"column":31,"nodeType":"149","messageId":"150","endLine":166,"endColumn":33},{"ruleId":"147","severity":1,"message":"148","line":180,"column":31,"nodeType":"149","messageId":"150","endLine":180,"endColumn":33},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","no-native-reassign",["174"],"no-negated-in-lhs",["175"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useState' is defined but never used.",["174"],["175"],"Expected '===' and instead saw '=='.","'recurring' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]